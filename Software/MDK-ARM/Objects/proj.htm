<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 21 23:31:03 2022
<BR><P>
<H3>Maximum Stack Usage =        500 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
doTarget(char*) &rArr; Commander::scalar(float*, char*) &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[14]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SVC_Handler</a><BR>
 <LI><a href="#[15]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DebugMon_Handler</a><BR>
 <LI><a href="#[16]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PendSV_Handler</a><BR>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[c4]">pinMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">pinMode</a><BR>
 <LI><a href="#[c3]">PWM_Init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">pinMode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from timer.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from hardwareserial.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">doTarget(char*)</a> from main.o(i._Z8doTargetPc) referenced from main.o(i._Z5setupv)
 <LI><a href="#[50]">BLDCDriver3PWM::setPhaseState(int, int, int)</a> from bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM13setPhaseStateEiii) referenced from bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
 <LI><a href="#[4c]">BLDCDriver3PWM::init()</a> from bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM4initEv) referenced from bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
 <LI><a href="#[4d]">BLDCDriver3PWM::enable()</a> from bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM6enableEv) referenced from bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
 <LI><a href="#[4f]">BLDCDriver3PWM::setPwm(float, float, float)</a> from bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM6setPwmEfff) referenced from bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
 <LI><a href="#[4e]">BLDCDriver3PWM::disable()</a> from bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM7disableEv) referenced from bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
 <LI><a href="#[51]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[58]">MagneticSensorSPI::getSensorAngle()</a> from magneticsensorspi.o(i._ZN17MagneticSensorSPI14getSensorAngleEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[52]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[52]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[52]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[55]">Sensor::getVelocity()</a> from sensor.o(i._ZN6Sensor11getVelocityEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[55]">Sensor::getVelocity()</a> from sensor.o(i._ZN6Sensor11getVelocityEv) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[57]">Sensor::needsSearch()</a> from sensor.o(i._ZN6Sensor11needsSearchEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[57]">Sensor::needsSearch()</a> from sensor.o(i._ZN6Sensor11needsSearchEv) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[53]">Sensor::getMechanicalAngle()</a> from sensor.o(i._ZN6Sensor18getMechanicalAngleEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[53]">Sensor::getMechanicalAngle()</a> from sensor.o(i._ZN6Sensor18getMechanicalAngleEv) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[56]">Sensor::update()</a> from sensor.o(i._ZN6Sensor6updateEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[56]">Sensor::update()</a> from sensor.o(i._ZN6Sensor6updateEv) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[54]">Sensor::getAngle()</a> from sensor.o(i._ZN6Sensor8getAngleEv) referenced from magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
 <LI><a href="#[54]">Sensor::getAngle()</a> from sensor.o(i._ZN6Sensor8getAngleEv) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[4a]">TwoWire::~TwoWire()</a> from wire.o(i._ZN7TwoWireD1Ev) referenced from wire.o(i.__sti___8_Wire_cpp_928ee5ff)
 <LI><a href="#[59]">BLDCMotor::init()</a> from bldcmotor.o(i._ZN9BLDCMotor4initEv) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[5e]">BLDCMotor::move(float)</a> from bldcmotor.o(i._ZN9BLDCMotor4moveEf) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[5b]">BLDCMotor::enable()</a> from bldcmotor.o(i._ZN9BLDCMotor6enableEv) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[5a]">BLDCMotor::disable()</a> from bldcmotor.o(i._ZN9BLDCMotor7disableEv) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[5c]">BLDCMotor::initFOC(float, Direction)</a> from bldcmotor.o(i._ZN9BLDCMotor7initFOCEf9Direction) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[5d]">BLDCMotor::loopFOC()</a> from bldcmotor.o(i._ZN9BLDCMotor7loopFOCEv) referenced from bldcmotor.o(.constdata__ZTV9BLDCMotor)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from bldcdriver3pwm.o(.constdata__ZTV10BLDCDriver)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from focmotor.o(.constdata__ZTV8FOCMotor)
 <LI><a href="#[4b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from wirebase.o(.constdata__ZTV8WireBase)
 <LI><a href="#[64]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[61]">__sti___18_HardwareSerial_cpp_cfa1b6a6</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[60]">__sti___21_MagneticSensorSPI_cpp_ded180f4</a> from magneticsensorspi.o(i.__sti___21_MagneticSensorSPI_cpp_ded180f4) referenced from magneticsensorspi.o(.init_array)
 <LI><a href="#[63]">__sti___7_SPI_cpp_ce5662b4</a> from spi.o(i.__sti___7_SPI_cpp_ce5662b4) referenced from spi.o(.init_array)
 <LI><a href="#[62]">__sti___8_Wire_cpp_928ee5ff</a> from wire.o(i.__sti___8_Wire_cpp_928ee5ff) referenced from wire.o(.init_array)
 <LI><a href="#[5f]">__sti___8_main_cpp_bc2ade05</a> from main.o(i.__sti___8_main_cpp_bc2ade05) referenced from main.o(.init_array)
 <LI><a href="#[45]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[47]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[46]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[48]">isspace</a> from wstring.o(i.isspace) referenced from strtod.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[194]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[195]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[196]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[197]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[198]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[76]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[199]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[19c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[19f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[70]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[67]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[73]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[77]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; setup() &rArr; BLDCMotor::initFOC(float, Direction) &rArr; BLDCMotor::alignSensor() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[7f]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[1ba]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::Commander(Stream&, char, bool)
</UL>

<P><STRONG><a name="[84]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1bb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_MagneticSensorSPI_cpp_ded180f4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1bf]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[80]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6c]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[83]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1c0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[88]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6a]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[82]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[8b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[8d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[90]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[72]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[91]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1c4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[46]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[93]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[89]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[92]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[7d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[74]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[9e]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[79]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[98]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[97]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1c6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[193]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1c9]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[a9]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[aa]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[96]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[9d]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[95]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[9c]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ac]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[b5]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[ad]"></a>ADC_DMA_Register</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, adc.o(i.ADC_DMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMA_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_SearchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[af]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b9]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b7]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b4]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b6]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b8]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[b1]"></a>ADCx_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, adc.o(i.ADCx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADCx_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>Delay_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_JTAG_Disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.GPIO_JTAG_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_JTAG_Disable &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_JTAG_Disable
</UL>

<P><STRONG><a name="[c1]"></a>GPIOx_Init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[117]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[168]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>PWM_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
</UL>

<P><STRONG><a name="[b3]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[d6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[b2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_JTAG_Disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[b0]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[d9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[13b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>

<P><STRONG><a name="[13a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_UP_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d5]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[c9]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[ce]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[cf]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d1]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d2]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d3]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[d4]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[cc]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[c6]"></a>TIMx_OCxInit</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, pwm.o(i.TIMx_OCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMx_OCxInit &rArr; Timer_ClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[cb]"></a>Timer_ClockCmd</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, timer.o(i.Timer_ClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_ClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[119]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[118]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[113]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[11b]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[da]"></a>_sqrtApprox(float)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, foc_utils.o(i._Z11_sqrtApproxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sqrtApprox(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
</UL>

<P><STRONG><a name="[dc]"></a>_normalizeAngle(float)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, foc_utils.o(i._Z15_normalizeAnglef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _normalizeAngle(float) &rArr; fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
</UL>

<P><STRONG><a name="[e0]"></a>_electricalAngle(float, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, foc_utils.o(i._Z16_electricalAnglefi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _electricalAngle(float, int) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
</UL>

<P><STRONG><a name="[e2]"></a>_cos(float)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, foc_utils.o(i._Z4_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
</UL>

<P><STRONG><a name="[e4]"></a>_sin(float)</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, foc_utils.o(i._Z4_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
</UL>

<P><STRONG><a name="[e7]"></a>loop()</STRONG> (Thumb, 1406 bytes, Stack size 104 bytes, main.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = loop() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getAngle()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::update()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>setup()</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, main.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = setup() &rArr; BLDCMotor::initFOC(float, Direction) &rArr; BLDCMotor::alignSensor() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::add(char, void(*)(char*), char*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::linkDriver(BLDCDriver*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::useMonitoring(Print&)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::linkSensor(Sensor*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getAngle()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::init(SPIClass*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>_delay(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time_utils.o(i._Z6_delaym))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[103]"></a>_micros()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time_utils.o(i._Z7_microsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::PIDController(float, float, float, float, float)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::update()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::LowPassFilter(float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
</UL>

<P><STRONG><a name="[49]"></a>doTarget(char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i._Z8doTargetPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = doTarget(char*) &rArr; Commander::scalar(float*, char*) &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::scalar(float*, char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z5setupv)
</UL>
<P><STRONG><a name="[127]"></a>SPISettings::SPISettings()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, magneticsensorspi.o(i._ZN11SPISettingsC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPISettings::SPISettings()
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
</UL>

<P><STRONG><a name="[1ca]"></a>SPISettings::SPISettings__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, magneticsensorspi.o(i._ZN11SPISettingsC1Ev), UNUSED)

<P><STRONG><a name="[106]"></a>CurrentSense::getFOCCurrents(float)</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, currentsense.o(i._ZN12CurrentSense14getFOCCurrentsEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CurrentSense::getFOCCurrents(float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
</UL>

<P><STRONG><a name="[108]"></a>LowPassFilter::LowPassFilter(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lowpass_filter.o(i._ZN13LowPassFilterC1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LowPassFilter::LowPassFilter(float) &rArr; _micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_bc2ade05
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::FOCMotor__sub_object()
</UL>

<P><STRONG><a name="[1cb]"></a>LowPassFilter::LowPassFilter__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lowpass_filter.o(i._ZN13LowPassFilterC1Ef), UNUSED)

<P><STRONG><a name="[e8]"></a>LowPassFilter::operator ()(float)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lowpass_filter.o(i._ZN13LowPassFilterclEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LowPassFilter::operator ()(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftVelocity()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
</UL>

<P><STRONG><a name="[10b]"></a>PIDController::PIDController(float, float, float, float, float)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pid.o(i._ZN13PIDControllerC1Efffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PIDController::PIDController(float, float, float, float, float) &rArr; _micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::FOCMotor__sub_object()
</UL>

<P><STRONG><a name="[1cc]"></a>PIDController::PIDController__sub_object(float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, pid.o(i._ZN13PIDControllerC1Efffff), UNUSED)

<P><STRONG><a name="[10c]"></a>PIDController::operator ()(float)</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, pid.o(i._ZN13PIDControllerclEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PIDController::operator ()(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
</UL>

<P><STRONG><a name="[50]"></a>BLDCDriver3PWM::setPhaseState(int, int, int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM13setPhaseStateEiii))
<BR>[Address Reference Count : 1]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
</UL>
<P><STRONG><a name="[4c]"></a>BLDCDriver3PWM::init()</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BLDCDriver3PWM::init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
</UL>
<P><STRONG><a name="[4d]"></a>BLDCDriver3PWM::enable()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM6enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLDCDriver3PWM::enable() &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
</UL>
<P><STRONG><a name="[4f]"></a>BLDCDriver3PWM::setPwm(float, float, float)</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM6setPwmEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLDCDriver3PWM::setPwm(float, float, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
</UL>
<P><STRONG><a name="[4e]"></a>BLDCDriver3PWM::disable()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWM7disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLDCDriver3PWM::disable() &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV14BLDCDriver3PWM)
</UL>
<P><STRONG><a name="[163]"></a>BLDCDriver3PWM::BLDCDriver3PWM(int, int, int, int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWMC1Eiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BLDCDriver3PWM::BLDCDriver3PWM(int, int, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_bc2ade05
</UL>

<P><STRONG><a name="[1cd]"></a>BLDCDriver3PWM::BLDCDriver3PWM__sub_object(int, int, int, int, int, int)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, bldcdriver3pwm.o(i._ZN14BLDCDriver3PWMC1Eiiiiii), UNUSED)

<P><STRONG><a name="[d7]"></a>HardwareSerial::IRQHandler()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial10IRQHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HardwareSerial::begin(unsigned) &rArr; HardwareSerial::begin(unsigned, SERIAL_Config) &rArr; HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[115]"></a>HardwareSerial::begin(unsigned, SERIAL_Config)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HardwareSerial::begin(unsigned, SERIAL_Config) &rArr; HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
</UL>

<P><STRONG><a name="[116]"></a>HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Confighh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>

<P><STRONG><a name="[51]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[160]"></a>HardwareSerial::HardwareSerial(USART_TypeDef*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP13USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_HardwareSerial_cpp_cfa1b6a6
</UL>

<P><STRONG><a name="[1ce]"></a>HardwareSerial::HardwareSerial__sub_object(USART_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP13USART_TypeDef), UNUSED)

<P><STRONG><a name="[11c]"></a>MagneticSensorSPI::getRawCount()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPI11getRawCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MagneticSensorSPI::getRawCount() &rArr; MagneticSensorSPI::read(unsigned) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getSensorAngle()
</UL>

<P><STRONG><a name="[58]"></a>MagneticSensorSPI::getSensorAngle()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPI14getSensorAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MagneticSensorSPI::getSensorAngle() &rArr; MagneticSensorSPI::getRawCount() &rArr; MagneticSensorSPI::read(unsigned) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getRawCount()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
</UL>
<P><STRONG><a name="[11f]"></a>MagneticSensorSPI::spiCalcEvenParity(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPI17spiCalcEvenParityEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MagneticSensorSPI::spiCalcEvenParity(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[f9]"></a>MagneticSensorSPI::init(SPIClass*)</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPI4initEP8SPIClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MagneticSensorSPI::init(SPIClass*) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[11d]"></a>MagneticSensorSPI::read(unsigned)</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPI4readEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MagneticSensorSPI::read(unsigned) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer16(unsigned short) const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::spiCalcEvenParity(unsigned)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getRawCount()
</UL>

<P><STRONG><a name="[125]"></a>MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPIC1E25MagneticSensorSPIConfig_si))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISettings::SPISettings()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_bc2ade05
</UL>

<P><STRONG><a name="[1cf]"></a>MagneticSensorSPI::MagneticSensorSPI__sub_object(MagneticSensorSPIConfig_s, int)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, magneticsensorspi.o(i._ZN17MagneticSensorSPIC1E25MagneticSensorSPIConfig_si), UNUSED)

<P><STRONG><a name="[129]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, print.o(i._ZN5Print10printFloatEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[130]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, print.o(i._ZN5Print11printNumberEyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>

<P><STRONG><a name="[132]"></a>Print::print(const __FlashStringHelper*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::print(const __FlashStringHelper*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignCurrentSense()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[12a]"></a>Print::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[f5]"></a>Print::print(char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[f6]"></a>Print::print(double, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f4]"></a>Print::print(int, int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[12e]"></a>Print::print(long long, int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printExi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[52]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[100]"></a>Print::println(const __FlashStringHelper*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print::println(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::useMonitoring(Print&)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::absoluteZeroSearch()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignCurrentSense()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[101]"></a>Print::println(const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print::println(const char*) &rArr; Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[f7]"></a>Print::println(double, int)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, print.o(i._ZN5Print7printlnEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::println(float)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[134]"></a>Print::println(int, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignCurrentSense()
</UL>

<P><STRONG><a name="[133]"></a>Print::println()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println() &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
</UL>

<P><STRONG><a name="[55]"></a>Sensor::getVelocity()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sensor.o(i._ZN6Sensor11getVelocityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sensor::getVelocity() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[57]"></a>Sensor::needsSearch()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor.o(i._ZN6Sensor11needsSearchEv))
<BR>[Address Reference Count : 2]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[53]"></a>Sensor::getMechanicalAngle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor.o(i._ZN6Sensor18getMechanicalAngleEv))
<BR>[Address Reference Count : 2]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[56]"></a>Sensor::update()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sensor.o(i._ZN6Sensor6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor::update() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[54]"></a>Sensor::getAngle()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sensor.o(i._ZN6Sensor8getAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sensor::getAngle() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> magneticsensorspi.o(.constdata__ZTV17MagneticSensorSPI)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[126]"></a>Sensor::Sensor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, magneticsensori2c.o(i._ZN6SensorC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
</UL>

<P><STRONG><a name="[162]"></a>TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[1d0]"></a>TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh), UNUSED)

<P><STRONG><a name="[4a]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i.__sti___8_Wire_cpp_928ee5ff)
</UL>
<P><STRONG><a name="[1d1]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[fa]"></a>FOCMotor::linkSensor(Sensor*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, focmotor.o(i._ZN8FOCMotor10linkSensorEP6Sensor))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[135]"></a>FOCMotor::shaftAngle()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, focmotor.o(i._ZN8FOCMotor10shaftAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FOCMotor::shaftAngle() &rArr; LowPassFilter::operator ()(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
</UL>

<P><STRONG><a name="[136]"></a>FOCMotor::shaftVelocity()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, focmotor.o(i._ZN8FOCMotor13shaftVelocityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FOCMotor::shaftVelocity() &rArr; LowPassFilter::operator ()(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
</UL>

<P><STRONG><a name="[fd]"></a>FOCMotor::useMonitoring(Print&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, focmotor.o(i._ZN8FOCMotor13useMonitoringER5Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FOCMotor::useMonitoring(Print&) &rArr; Print::println(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[137]"></a>FOCMotor::electricalAngle()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, focmotor.o(i._ZN8FOCMotor15electricalAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FOCMotor::electricalAngle() &rArr; _normalizeAngle(float) &rArr; fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[138]"></a>FOCMotor::FOCMotor__sub_object()</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, focmotor.o(i._ZN8FOCMotorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FOCMotor::FOCMotor__sub_object() &rArr; PIDController::PIDController(float, float, float, float, float) &rArr; _micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::PIDController(float, float, float, float, float)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::LowPassFilter(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::BLDCMotor(int, float)
</UL>

<P><STRONG><a name="[139]"></a>SPIClass::setBitOrder(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(i._ZN8SPIClass11setBitOrderEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIClass::setBitOrder(unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
</UL>

<P><STRONG><a name="[13c]"></a>SPIClass::setDataMode(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass11setDataModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
</UL>

<P><STRONG><a name="[13d]"></a>SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, spi.o(i._ZN8SPIClass12SPI_SettingsEP11SPI_TypeDeftttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[123]"></a>SPIClass::endTransaction()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClass14endTransactionEv))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[120]"></a>SPIClass::beginTransaction(SPISettings)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass16beginTransactionE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::beginTransaction(SPISettings)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[11e]"></a>SPIClass::begin(SPISettings)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass5beginE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPIClass::begin(SPISettings) &rArr; SPIClass::begin() &rArr; SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::init(SPIClass*)
</UL>

<P><STRONG><a name="[13e]"></a>SPIClass::begin()</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, spi.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIClass::begin() &rArr; SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
</UL>

<P><STRONG><a name="[13f]"></a>SPIClass::setClock(unsigned)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass8setClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin(SPISettings)
</UL>

<P><STRONG><a name="[161]"></a>SPIClass::SPIClass(SPI_TypeDef*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClassC1EP11SPI_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ce5662b4
</UL>

<P><STRONG><a name="[1d2]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClassC1EP11SPI_TypeDef), UNUSED)

<P><STRONG><a name="[fb]"></a>BLDCMotor::linkDriver(BLDCDriver*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldcmotor.o(i._ZN9BLDCMotor10linkDriverEP10BLDCDriver))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[140]"></a>BLDCMotor::alignSensor()</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, bldcmotor.o(i._ZN9BLDCMotor11alignSensorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = BLDCMotor::alignSensor() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::absoluteZeroSearch()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
</UL>

<P><STRONG><a name="[144]"></a>BLDCMotor::angleOpenloop(float)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, bldcmotor.o(i._ZN9BLDCMotor13angleOpenloopEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BLDCMotor::angleOpenloop(float) &rArr; BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_electricalAngle(float, int)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::absoluteZeroSearch()
</UL>

<P><STRONG><a name="[142]"></a>BLDCMotor::setPhaseVoltage(float, float, float)</STRONG> (Thumb, 2310 bytes, Stack size 96 bytes, bldcmotor.o(i._ZN9BLDCMotor15setPhaseVoltageEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sqrtApprox(float)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::absoluteZeroSearch()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[147]"></a>BLDCMotor::velocityOpenloop(float)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bldcmotor.o(i._ZN9BLDCMotor16velocityOpenloopEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BLDCMotor::velocityOpenloop(float) &rArr; BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_electricalAngle(float, int)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
</UL>

<P><STRONG><a name="[148]"></a>BLDCMotor::alignCurrentSense()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotor17alignCurrentSenseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BLDCMotor::alignCurrentSense() &rArr; Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
</UL>

<P><STRONG><a name="[141]"></a>BLDCMotor::absoluteZeroSearch()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotor18absoluteZeroSearchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BLDCMotor::absoluteZeroSearch() &rArr; BLDCMotor::angleOpenloop(float) &rArr; BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[59]"></a>BLDCMotor::init()</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotor4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BLDCMotor::init() &rArr; Print::println(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[5e]"></a>BLDCMotor::move(float)</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, bldcmotor.o(i._ZN9BLDCMotor4moveEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BLDCMotor::move(float) &rArr; BLDCMotor::angleOpenloop(float) &rArr; BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftVelocity()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[5b]"></a>BLDCMotor::enable()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotor6enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLDCMotor::enable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[5a]"></a>BLDCMotor::disable()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotor7disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLDCMotor::disable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[5c]"></a>BLDCMotor::initFOC(float, Direction)</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, bldcmotor.o(i._ZN9BLDCMotor7initFOCEf9Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BLDCMotor::initFOC(float, Direction) &rArr; BLDCMotor::alignSensor() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignCurrentSense()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[5d]"></a>BLDCMotor::loopFOC()</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, bldcmotor.o(i._ZN9BLDCMotor7loopFOCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BLDCMotor::loopFOC() &rArr; BLDCMotor::setPhaseVoltage(float, float, float) &rArr; _cos(float) &rArr; _sin(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bldcmotor.o(.constdata__ZTV9BLDCMotor)
</UL>
<P><STRONG><a name="[149]"></a>BLDCMotor::BLDCMotor(int, float)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotorC1Eif))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLDCMotor::BLDCMotor(int, float) &rArr; FOCMotor::FOCMotor__sub_object() &rArr; PIDController::PIDController(float, float, float, float, float) &rArr; _micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::FOCMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_bc2ade05
</UL>

<P><STRONG><a name="[1d3]"></a>BLDCMotor::BLDCMotor__sub_object(int, float)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bldcmotor.o(i._ZN9BLDCMotorC1Eif), UNUSED)

<P><STRONG><a name="[14a]"></a>Commander::isSentinel(char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commander.o(i._ZN9Commander10isSentinelEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Commander::isSentinel(char) &rArr; Commander::printVerbose(const __FlashStringHelper*) &rArr; Commander::print(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::printVerbose(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::scalar(float*, char*)
</UL>

<P><STRONG><a name="[14b]"></a>Commander::printVerbose(const __FlashStringHelper*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, commander.o(i._ZN9Commander12printVerboseEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Commander::printVerbose(const __FlashStringHelper*) &rArr; Commander::print(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::print(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::isSentinel(char)
</UL>

<P><STRONG><a name="[ff]"></a>Commander::add(char, void(*)(char*), char*)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, commander.o(i._ZN9Commander3addEcPFvPcES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Commander::add(char, void(*)(char*), char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[14c]"></a>Commander::print(const __FlashStringHelper*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, commander.o(i._ZN9Commander5printEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Commander::print(const __FlashStringHelper*) &rArr; Print::print(const __FlashStringHelper*) &rArr; Print::print(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::printVerbose(const __FlashStringHelper*)
</UL>

<P><STRONG><a name="[105]"></a>Commander::scalar(float*, char*)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, commander.o(i._ZN9Commander6scalarEPfPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = Commander::scalar(float*, char*) &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::println(float)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::isSentinel(char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTarget(char*)
</UL>

<P><STRONG><a name="[14e]"></a>Commander::println(float)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, commander.o(i._ZN9Commander7printlnEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Commander::println(float) &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::scalar(float*, char*)
</UL>

<P><STRONG><a name="[14f]"></a>Commander::Commander(Stream&, char, bool)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, commander.o(i._ZN9CommanderC1ER6Streamcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Commander::Commander(Stream&, char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_bc2ade05
</UL>

<P><STRONG><a name="[1d4]"></a>Commander::Commander__sub_object(Stream&, char, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, commander.o(i._ZN9CommanderC1ER6Streamcb), UNUSED)

<P><STRONG><a name="[121]"></a>SPIClass::transfer16(unsigned short) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spi.o(i._ZNK8SPIClass10transfer16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::transfer16(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[f0]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
</UL>

<P><STRONG><a name="[143]"></a>std::fabs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bldcmotor.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[16a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[165]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[124]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[4b]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 6]<UL><LI> bldcdriver3pwm.o(.constdata__ZTV10BLDCDriver)
<LI> focmotor.o(.constdata__ZTV8FOCMotor)
<LI> sensor.o(.constdata__ZTV6Sensor)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
<LI> wirebase.o(.constdata__ZTV8WireBase)
</UL>
<P><STRONG><a name="[151]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[153]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[154]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[155]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[157]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[158]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[15a]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[15b]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[15c]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[a2]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[15e]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[15d]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[a8]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[a1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[145]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
</UL>

<P><STRONG><a name="[14d]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::scalar(float*, char*)
</UL>

<P><STRONG><a name="[ec]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[102]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay(unsigned long)
</UL>

<P><STRONG><a name="[122]"></a>delay_us</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
</UL>

<P><STRONG><a name="[ed]"></a>digitalWrite</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, arduino.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::init(SPIClass*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::read(unsigned)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::disable()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::enable()
</UL>

<P><STRONG><a name="[146]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
</UL>

<P><STRONG><a name="[dd]"></a>fmodf</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fmodf.o(i.fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
</UL>

<P><STRONG><a name="[15f]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[48]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wstring.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = main &rArr; setup() &rArr; BLDCMotor::initFOC(float, Direction) &rArr; BLDCMotor::alignSensor() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; Print::print(int, int) &rArr; Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_JTAG_Disable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[104]"></a>micros</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, delay.o(i.micros))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_micros()
</UL>

<P><STRONG><a name="[c4]"></a>pinMode</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, arduino.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::init(SPIClass*)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[128]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
</UL>

<P><STRONG><a name="[111]"></a>pwmWrite</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pwm.o(i.pwmWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
</UL>

<P><STRONG><a name="[169]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[45]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::scalar(float*, char*)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[16d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[170]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[173]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[177]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[175]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::disable()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::enable()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[176]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[178]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
</UL>

<P><STRONG><a name="[179]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::disable()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::enable()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d5]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[17a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[17d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[172]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[17c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17e]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[16b]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[180]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::println(float)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::initFOC(float, Direction)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
</UL>

<P><STRONG><a name="[181]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getAngle()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[183]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[185]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[188]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getSensorAngle()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[186]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
</UL>

<P><STRONG><a name="[187]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[189]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_electricalAngle(float, int)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getAngle()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftVelocity()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getSensorAngle()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1d7]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1d8]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::absoluteZeroSearch()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
</UL>

<P><STRONG><a name="[18a]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[18d]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_electricalAngle(float, int)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sqrtApprox(float)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getAngle()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftVelocity()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::getSensorAngle()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[18b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[182]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[167]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
</UL>

<P><STRONG><a name="[16e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::init()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::update()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::init()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_normalizeAngle(float)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::velocityOpenloop(float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::setPwm(float, float, float)
</UL>

<P><STRONG><a name="[18c]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[166]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmodf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[18e]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDController::operator ()(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sin(float)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cos(float)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::loopFOC()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::move(float)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::update()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::getVelocity()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::operator ()(float)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::electricalAngle()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCMotor::shaftAngle()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSense::getFOCCurrents(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::setPhaseVoltage(float, float, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::angleOpenloop(float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::alignSensor()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[190]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[4]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[174]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[156]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[159]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[8f]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[a0]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9f]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[192]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__sti___8_main_cpp_bc2ade05</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main.o(i.__sti___8_main_cpp_bc2ade05))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __sti___8_main_cpp_bc2ade05 &rArr; MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commander::Commander(Stream&, char, bool)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCMotor::BLDCMotor(int, float)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticSensorSPI::MagneticSensorSPI(MagneticSensorSPIConfig_s, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCDriver3PWM::BLDCDriver3PWM(int, int, int, int, int, int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::LowPassFilter(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[60]"></a>__sti___21_MagneticSensorSPI_cpp_ded180f4</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, magneticsensorspi.o(i.__sti___21_MagneticSensorSPI_cpp_ded180f4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___21_MagneticSensorSPI_cpp_ded180f4 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magneticsensorspi.o(.init_array)
</UL>
<P><STRONG><a name="[61]"></a>__sti___18_HardwareSerial_cpp_cfa1b6a6</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___18_HardwareSerial_cpp_cfa1b6a6
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(USART_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[62]"></a>__sti___8_Wire_cpp_928ee5ff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_928ee5ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_Wire_cpp_928ee5ff &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[63]"></a>__sti___7_SPI_cpp_ce5662b4</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, spi.o(i.__sti___7_SPI_cpp_ce5662b4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___7_SPI_cpp_ce5662b4
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[ae]"></a>ADC_DMA_SearchChannel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADC_DMA_SearchChannel))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>

<P><STRONG><a name="[bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, delay.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[c7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[17f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[171]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[18f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[184]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8e]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[9b]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
